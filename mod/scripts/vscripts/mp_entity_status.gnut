///
///	THIS MOD IS DESIGNED ONLY FOR FRONTIER-DEFENSE MODE IN TITANFALL2.
/// DO NOT USE THIS IN OTHER GAMEMODES. I JUST PUSHED AS FAR AS I CAN ON THIS.
///
///




untyped
global function InitMpEntityStatus

// DESIGNED MAX FOR 8 PLAYERS MATCH. ITS POSSIBLE TO EXTEED TO 8+ IF YOU WANT.
const int maxSlot = 8
const bool isDev = true

table < string, int > titanKit2Table = {
	[ "pas_ronin_weapon" ]					= ePassives.PAS_RONIN_WEAPON,
	[ "pas_northstar_weapon" ]				= ePassives.PAS_NORTHSTAR_WEAPON,
	[ "pas_ion_weapon" ]					= ePassives.PAS_ION_WEAPON,
	[ "pas_tone_weapon" ]					= ePassives.PAS_TONE_WEAPON,
	[ "pas_scorch_weapon" ]					= ePassives.PAS_SCORCH_WEAPON,
	[ "pas_legion_weapon" ]					= ePassives.PAS_LEGION_WEAPON,

	[ "pas_ion_tripwire" ]					= ePassives.PAS_ION_TRIPWIRE,
	[ "pas_ion_vortex" ]					= ePassives.PAS_ION_VORTEX,
	[ "pas_ion_lasercannon" ]				= ePassives.PAS_ION_LASERCANNON,
	[ "pas_ion_weapon_ads" ]				= ePassives.PAS_ION_WEAPON_ADS,

	[ "pas_tone_rockets" ]					= ePassives.PAS_TONE_ROCKETS,
	[ "pas_tone_sonar" ]					= ePassives.PAS_TONE_SONAR,
	[ "pas_tone_wall" ]						= ePassives.PAS_TONE_WALL,
	[ "pas_tone_burst" ]					= ePassives.PAS_TONE_BURST,

	[ "pas_ronin_arcwave" ]					= ePassives.PAS_RONIN_ARCWAVE,
	[ "pas_ronin_phase" ]					= ePassives.PAS_RONIN_PHASE,
	[ "pas_ronin_swordcore" ]				= ePassives.PAS_RONIN_SWORDCORE,
	[ "pas_ronin_autoshift" ]				= ePassives.PAS_RONIN_AUTOSHIFT,

	[ "pas_northstar_cluster" ]				= ePassives.PAS_NORTHSTAR_CLUSTER,
	[ "pas_northstar_trap" ]				= ePassives.PAS_NORTHSTAR_TRAP,
	[ "pas_northstar_flightcore" ]			= ePassives.PAS_NORTHSTAR_FLIGHTCORE,
	[ "pas_northstar_optics" ]				= ePassives.PAS_NORTHSTAR_OPTICS,

	[ "pas_scorch_firewall" ]				= ePassives.PAS_SCORCH_FIREWALL,
	[ "pas_scorch_shield" ]					= ePassives.PAS_SCORCH_SHIELD,
	[ "pas_scorch_selfdmg" ]				= ePassives.PAS_SCORCH_SELFDMG,
	[ "pas_scorch_flamecore" ]				= ePassives.PAS_SCORCH_FLAMECORE,

	[ "pas_legion_spinup" ]					= ePassives.PAS_LEGION_SPINUP,
	[ "pas_legion_gunshield" ]				= ePassives.PAS_LEGION_GUNSHIELD,
	[ "pas_legion_smartcore" ]				= ePassives.PAS_LEGION_SMARTCORE,
	[ "pas_legion_siege" ]					= ePassives.PAS_LEGION_SIEGE,
	[ "pas_legion_chargeshot" ]				= ePassives.PAS_LEGION_CHARGESHOT,

	[ "pas_vanguard_coremeter" ]			= ePassives.PAS_VANGUARD_COREMETER,
	[ "pas_vanguard_shield" ]				= ePassives.PAS_VANGUARD_SHIELD,
	[ "pas_vanguard_rearm" ]				= ePassives.PAS_VANGUARD_REARM,
	[ "pas_vanguard_doom" ]					= ePassives.PAS_VANGUARD_DOOM,
}

table < string, int > vanguardUpgrades = {
	[ "pas_vanguard_core1" ]					= ePassives.PAS_VANGUARD_CORE1,
	[ "pas_vanguard_core2" ]					= ePassives.PAS_VANGUARD_CORE2,
	[ "pas_vanguard_core3" ]					= ePassives.PAS_VANGUARD_CORE3,
	[ "pas_vanguard_core4" ]					= ePassives.PAS_VANGUARD_CORE4,
	[ "pas_vanguard_core5" ]					= ePassives.PAS_VANGUARD_CORE5,
	[ "pas_vanguard_core6" ]					= ePassives.PAS_VANGUARD_CORE6,
	[ "pas_vanguard_core7" ]					= ePassives.PAS_VANGUARD_CORE7,
	[ "pas_vanguard_core8" ]					= ePassives.PAS_VANGUARD_CORE8,
	[ "pas_vanguard_core9" ]					= ePassives.PAS_VANGUARD_CORE9,

}

struct PlayerInfo
{
	string playerName = ""

	int ageisLevel = -1

	string titanClass = ""
	asset titanCoreIcon = $""


	asset vanguardCoreIcon0 = $""	// APEX
	asset vanguardCoreIcon1 = $""
	asset vanguardCoreIcon2 = $""
	asset vanguardCoreIcon3 = $""

	vector color

	var rodeoRUI
	var bar
}



struct 
{
	var entityStatus
	table playerColor
	table < string, int> waveScores

	table < string, PlayerInfo> playerInfos

	bool shouldHide = false

	var test
	var cockpitRui 

	array<entity> targets
	
	float panelAlpha
	float avatarAlpha
	
	float healthbarLabelAlpha
	float moneyLabelAlpha
	table healthbarCommonFgColor
	table healthbarLocalFgColor
	table healthbarPartyFgColor
	table healthbarDoomFgColor
	table healthbarShieldFgColor
	table healthbarAutotitanFgColor

	float coreLabelAlpha
	table coreLabelCoreBuildingFgColor
	table coreLabelCoreReadyFgColor
	table coreLabelTitanBuildingFgColor

	float coreProgressAlpha
	table coreProgressFgColor

	float coreBgAlpha
	table coreBgColor
} file




void function InitMpEntityStatus() {
	AddCallback_GameStateEnter( eGameState.Prematch, HideEntityStatus )
	AddCallback_GameStateEnter( eGameState.Prematch, HideEntityStatus )
	AddCallback_GameStateEnter( eGameState.Playing, ShowEntityStatus )
	AddCallback_GameStateEnter( eGameState.WinnerDetermined, HideEntityStatus )
	AddCallback_GameStateEnter( eGameState.Epilogue, HideEntityStatus )
	AddScoreboardShowCallback( OnSbShow )
    AddScoreboardHideCallback( OnSbHide )


	thread Monitor()
}

void function OnSbShow() {
	file.shouldHide = true
}
void function OnSbHide() {
	file.shouldHide = false
}
void function HideEntityStatus()
{
	if (file.entityStatus != null) 
		file.entityStatus.Hide()
}

void function ShowEntityStatus()
{
	if (file.entityStatus != null) 
		file.entityStatus.Show()
}

void function TestFunc()
{
	PlayerInfo p
	p.playerName = "ano"
	array<PlayerInfo> a 
	a.append(p)

	PlayerInfo b = a[0]
	// PlayerInfo c = a[0].weakref()
	// PlayerInfo d = p.weakref()
	b.playerName = "bbbbbb"

	printt(p.playerName, a[0].playerName, b.playerName)

	Assert(p == a[0])
	Assert(p == b)
	// Assert(p == c)
	// Assert(p == d)
}

bool function ShowDrawHud() {
	if (GameRules_GetGameMode() != FD || file.shouldHide || IsLobby() || file.shouldHide || clGlobal.isMenuOpen || clGlobal.isSoloDialogMenuOpen || clGlobal.isSpectating)
	{
		// return false
		return true

	}

	return true
}

void function Monitor() {
	WaitFrame()
	// TestFunc()
	
	// AddScoreEventCallback( GetScoreEvent( "FDTeamWave" ).eventId, ClearScoreInWave )

	file.entityStatus = HudElement("EntityStatus")
	HideEntityStatus()


	while (true) {
		WaitFrame()

		if (!ShowDrawHud()) {
			HideEntityStatus()
			continue
		}
		ShowEntityStatus()
		

			
		for (int i = 0; i < maxSlot; i++) {
			var panel = HudElement("EntityStatusBar" + i, file.entityStatus)
			panel.Hide()
		}

		file.entityStatus.Show()
		int i = 0
		file.targets = GetTargets()

		foreach (entity ent in file.targets) {
			string name = ent.GetPlayerName()


			var panel = HudElement("EntityStatusBar" + i, file.entityStatus)
			panel.Show()
			SetBarValues(i, ent)

			i++
			if (i >= 8) {
				break
			}
		}




	}
}

array<entity> function GetTargets() {
	if (GameRules_GetGameMode() != FD) {
		// return GetPlayerArray().filter(
		// 	bool function(int index,  entity player)
		// 	{
		// 		return player.GetTeam() == GetLocalClientPlayer().GetTeam() ? true : false
		// 	}
		// )
		array<entity> a = []
		foreach (player in GetPlayerArray()) {
			if (player.GetTeam() == GetLocalClientPlayer().GetTeam()) {
				a.append(player)
			}
		}

		return a
	}
	// return [GetLocalClientPlayer()]
	return GetPlayerArray()
}



asset function PrepareIconImageAsset(entity player) {
	asset icon = $"rui/menu/dpad_comms/emoji/skull";

	if (IsValid(player) && IsAlive(player) && player.IsPlayer()) {
		if(player.IsTitan())
		 	icon = GetPlayerTitanIcon(player)
		else if (player.GetOffhandWeapons().len() > 1 && IsValid(player.GetOffhandWeapons()[1]))
			icon = GetWeaponInfoFileKeyFieldAsset_Global( player.GetOffhandWeapons()[1].GetWeaponClassName(), "hud_icon" )
	}

	return icon
}

// ported from SetStatsBarValues
void function SetBarValues(int panelIndex, entity ent)
{
	
	// Get nested panel
	var entityBar = HudElement("EntityStatusBar" + panelIndex, file.entityStatus)
	entityBar.Hide()


	Assert( ent.IsPlayer() )
	/// test stuff
	// RuiSetImage( Hud_GetRui(Hud_GetChild( entityBar, "EntityImageBattery" )), "basicImage",
	// $"rui/hud/battery/battery_capture_friendly")
	// Hud_GetChild( entityBar, "Core0" ).Show()

	// entity weapon = ent.GetOffhandWeapon( 1 )
	// if (IsValid(weapon)) {
	// 	InitOffhandRui(Hud_GetRui(Hud_GetChild(entityBar, "Core0")), ent, weapon)
	// 	UpdateOffhandRuiVisibility( Hud_GetRui(Hud_GetChild(entityBar, "Core0")), "%offhand1%" )
	// }

	if ( !ShowDrawHud() ){
		HideEntityStatus()
		try {
			GetLocalClientPlayer().cv.hudCheaterMessage.Hide()
		} catch (exception){
			
		}
		return
	}
	else
	{
		LoadModSettings()
		ShowEntityStatus()
	}

	try {
		ShowRUIHUD(ent)
	} catch (exception){
		PrintFunc(exception)
	}


	
	string titleString = ent.IsPlayer() ? ent.GetPlayerName() : ent.GetTargetName()
	var startValue = 0
	var endValue = ent.GetMaxHealth()
	var currentValue = ent.GetHealth().tofloat()
	asset image = PrepareIconImageAsset(ent)


	Assert( endValue > startValue )
	Assert( currentValue >= startValue && currentValue <= endValue )





	// Avatar
	var avatar = Hud_GetChild( entityBar, "EntityImage" )
	RuiSetImage( Hud_GetRui(avatar), "basicImage", image)
	RuiSetFloat( Hud_GetRui(avatar), "basicImageAlpha", file.avatarAlpha * file.panelAlpha)

	// if (IsValid(ent.GetCockpit())) {
		
	// 	RuiSetDrawGroup( Hud_GetRui(avatar), RUI_DRAW_COCKPIT )
	// }



	// Thats bad. Core with bg is not that awesome.
	RuiSetImage( Hud_GetRui(Hud_GetChild( entityBar, "Core" )), "basicImage", $"rui/titan_loadout/core/titan_core_laser" )
	RuiSetImage( Hud_GetRui(Hud_GetChild( entityBar, "CoreBg" )), "basicImage", $"vgui/white" )
	RuiSetImage( Hud_GetRui(Hud_GetChild( entityBar, "CoreBgStatic" )), "basicImage", $"vgui/white" )
	// RuiSetFloat3( Hud_GetRui(Hud_GetChild( entityBar, "CoreBg" )), "basicImageColor", <0,0,0> )



	// avatar bg
	RuiSetImage( Hud_GetRui(Hud_GetChild( entityBar, "EntityImageShade" )), "basicImage", $"vgui/hud/white")
	RuiSetFloat3( Hud_GetRui(Hud_GetChild( entityBar, "EntityImageShade" )), "basicImageColor", <0,0,0> )
	RuiSetFloat( Hud_GetRui(Hud_GetChild( entityBar, "EntityImageShade" )), "basicImageAlpha", 0.3 )
	// RuiSetFloat( Hud_GetRui(Hud_GetChild( entityBar, "EntityImageShade" )), "basicImageAlpha", file.avatarAlpha * file.panelAlpha)


	
	// Change the bg color of avatar due to titan class
	// RuiSetImage( Hud_GetRui(Hud_GetChild( entityBar, "EntityImageBg" )), "basicImage", $"vgui/hud/white")
	// RuiSetFloat( Hud_GetRui(Hud_GetChild( entityBar, "EntityImageBg" )), "basicImageAlpha", 0.6 )
	// thread TrySetBgColor(entityBar, ent)

	// RuiSetFloat3( Hud_GetRui(Hud_GetChild( entityBar, "EntityImageBg" )), "basicImageColor", < FRIENDLY_R, FRIENDLY_G, FRIENDLY_B> )
	// if (IsPartyMember(ent)) 
	// 	RuiSetFloat3( Hud_GetRui(Hud_GetChild( entityBar, "EntityImageBg" )), "basicImageColor", < PARTY_R, PARTY_G, PARTY_B> )
	// if (ent.GetPlayerName() == GetLocalClientPlayer().GetPlayerName()
	//  && ent.GetPlayerName() == GetLocalViewPlayer().GetPlayerName()) 
	//  RuiSetFloat3( Hud_GetRui(Hud_GetChild( entityBar, "EntityImageBg" )), "basicImageColor", < LOCAL_R, LOCAL_G, LOCAL_B> )
	
	// Update title
	var title = Hud_GetChild( entityBar, "EntityTitle" )
	Hud_SetText( title, titleString )
	Hud_SetColor( title, 255 , 248, 220, 255 )

	// LOCAL/PARTY
	if (IsPartyMember(ent)) 
		Hud_SetColorWithTable( title, file.healthbarPartyFgColor )
	if (ent.GetPlayerName() == GetLocalClientPlayer().GetPlayerName()
	 && ent.GetPlayerName() == GetLocalViewPlayer().GetPlayerName()) 
	 	Hud_SetColorWithTable( title, file.healthbarLocalFgColor )

	


	


	// Update bar progress
	var frac = (currentValue - startValue) / endValue;
	// printt("start", startValue, "end", endValue, "current", currentValue, "frac", frac)

	var barFill = Hud_GetChild( entityBar, "BarFill" )
	Hud_SetScaleX( barFill, frac )
	// Hud_SetScaleX( barFill, 0.5 )
	// Hud_SetScaleX( Hud_GetChild( entityBar, "BarFillShield" ), 0.7 )
 
	SetBarFillColor(barFill, ent)



	var barFillShadow = Hud_GetChild( entityBar, "BarFillShadow" )
	Hud_SetText( Hud_GetChild( entityBar, "BarDesc" ), format("%.0f/%.0f", currentValue, endValue) )

	// Hud_SetColor( Hud_GetChild( entityBar, "BarDesc" ), LOCAL_R, LOCAL_G, LOCAL_B, 255 )

	entity offhandWeapon = ent.GetOffhandWeapon( OFFHAND_INVENTORY )
	if (IsValid(offhandWeapon)) {
		// printt(ent.GetPlayerName(), "has Item", offhandWeapon.GetWeaponClassName(), "In Inv: ", ent.GetPlayerNetInt("itemInventoryCount"), "(itemInventoryCount), ")
		// printt(ent.GetPlayerName(), "has Item", offhandWeapon.GetWeaponClassName(), "In Inv: ", offhandWeapon.GetWeaponPrimaryClipCount(), "(GetWeaponPrimaryClipCount)")
	}

	ResetVanguardIcons(entityBar)

	///////////// COOOOOOOOOOOOOORE
	Hud_GetChild( entityBar, "CoreLabel" ).Hide()
	Hud_GetChild( entityBar, "CoreBg" ).Hide()
	Hud_GetChild( entityBar, "CoreBgStatic" ).Hide()
	Hud_GetChild( entityBar, "Core" ).Hide()
	Hud_GetChild( entityBar, "Core0" ).Hide()
	Hud_GetChild( entityBar, "Smoke" ).Hide()
	
	
	Hud_GetChild( entityBar, "EntityImageAutotitan" ).Hide()
	Hud_GetChild( entityBar, "BarFillAutotitan" ).Hide()
	
	Hud_GetChild( entityBar, "BarFillShield" ).Hide()
	Hud_GetChild( entityBar, "BarFillShieldHeader" ).Hide()

	// RuiSetImage( Hud_GetRui(Hud_GetChild( entityBar, "Core0" )), "basicImage", $"rui/menu/dpad_comms/emoji/skull" )
	// UpdateAbilityHud(Hud_GetRui(Hud_GetChild(entityBar, "Core")), ent)
	// RuiSetImage( Hud_GetRui(Hud_GetChild(entityBar, "Core0")), "hudIcon", $"rui/menu/dpad_comms/emoji/skull" )
	// RuiSetBool( Hud_GetRui(Hud_GetChild(entityBar, "Core0")), "isVisible", true )


	
	asset coreIcon = GetPlayerCoreIcon(ent)
	asset titanIcon = GetPlayerTitanIcon(ent)
	if (coreIcon != $"" && HasTitan(ent)) {
		Hud_GetChild( entityBar, "Core" ).Show()
		Hud_GetChild( entityBar, "CoreBg" ).Show()
		Hud_GetChild( entityBar, "CoreBgStatic" ).Show()

		
		// RuiSetImage( Hud_GetRui(Hud_GetChild( entityBar, "CoreBg" )), "basicImage", coreIcon)
		RuiSetImage( Hud_GetRui(Hud_GetChild( entityBar, "Core" )), "basicImage", coreIcon)
		// RuiSetFloat( Hud_GetRui(Hud_GetChild( entityBar, "Core" )), "basicImageAlpha", 0.7 )


		entity soul = ent.GetTitanSoul()
		entity titan
		// Make auto-titan available
		if (IsValid(ent.GetPetTitan())) {
			soul = ent.GetPetTitan().GetTitanSoul()
		}

		
		// Core Build
		if (IsValid( soul )) {
			titan = soul.GetTitan()
			// Core-ready and not in-use
			// if (IsCoreChargeAvailable(ent, soul) && !TitanCoreInUse( ent )) {

		
			// }


			
		// printt(ent.GetPlayerName(), "GetShieldHealth:", titan.GetShieldHealth(), ",GetShieldHealthMax():", titan.GetShieldHealthMax())
		// printt(ent.GetPlayerName(), "Frac:", GetShieldHealthFrac(ent))
		// printt(ent.GetPlayerName(), "ent.lastShieldHealth:", ent.lastShieldHealth)


			// Playertitan core gets more alpha than auto one
			if (ent.IsTitan()) 
				RuiSetFloat( Hud_GetRui(Hud_GetChild( entityBar, "Core" )), "basicImageAlpha", 0.7 )
			else
				RuiSetFloat( Hud_GetRui(Hud_GetChild( entityBar, "Core" )), "basicImageAlpha", 0.3 )

			Hud_GetChild( entityBar, "CoreLabel" ).Show()


			float coreAvailableFrac = soul.GetTitanSoulNetFloat( "coreExpireFrac" )
			float coreReadyFrac = soul.GetTitanSoulNetFloat( "coreAvailableFrac" )
			// printt(ent.IsTitan() ? "Titan" : "Pilot", "(",
			//     ent.GetPlayerName(), ")", "coreAvailableFrac:", coreAvailableFrac, ",coreReadyFrac:", coreReadyFrac)

			RuiSetFloat3( Hud_GetRui(Hud_GetChild( entityBar, "CoreBgStatic" )), "basicImageColor", <file.coreBgColor.r,file.coreBgColor.g,file.coreBgColor.b> )
			RuiSetFloat3( Hud_GetRui(Hud_GetChild( entityBar, "CoreBg" )), "basicImageColor", <file.coreProgressFgColor.r,file.coreProgressFgColor.g,file.coreProgressFgColor.b> )
			// RuiSetFloat( Hud_GetRui(Hud_GetChild( entityBar, "CoreBg" )), "basicImageAlpha", 0.1 )
			// Hud_SetAlpha(Hud_GetChild(entityBar, "CoreBg"), 0.2)
			// RuiSetFloat( Hud_GetRui(Hud_GetChild( entityBar, "CoreBgStatic" )), "basicImageAlpha", 0.7 )
			
			// Using, countdown
			if (ent.IsTitan() && TitanCoreInUse(ent)) {
				Hud_SetText(Hud_GetChild(entityBar, "CoreLabel"), format("%d", coreAvailableFrac * 100 + 0.5))
				// Hud_SetColor( Hud_GetChild( entityBar, "CoreLabel" ), LOCAL_R, LOCAL_G, LOCAL_B, 255 )
				// Hud_SetColorWithTable(Hud_GetChild( entityBar, "CoreLabel" ), file.coreLabelCoreBuildingFgColor)
				Hud_SetColorWithTable(Hud_GetChild( entityBar, "CoreLabel" ), file.coreLabelCoreReadyFgColor)

				// RuiSetFloat3( Hud_GetRui(Hud_GetChild( entityBar, "CoreBg" )), "basicImageColor", <180,180,180> )
				// RuiSetFloat( Hud_GetRui(Hud_GetChild( entityBar, "CoreBg" )), "basicImageAlpha", 0.7 )

				// RuiSetFloat3( Hud_GetRui(Hud_GetChild( entityBar, "CoreBg" )), "basicImageColor", <66, 66, 66> )
				Hud_SetScaleX(Hud_GetChild(entityBar, "CoreBg"), coreAvailableFrac)

				
			}
			// Preparing
			else if (!IsCoreChargeAvailable(ent, soul) && coreReadyFrac < 1.0) {
				Hud_SetText(Hud_GetChild(entityBar, "CoreLabel"), format("%d", coreReadyFrac * 100 + 0.5))
				// Hud_SetColor( Hud_GetChild( entityBar, "CoreLabel" ), PARTY_R, PARTY_G, PARTY_B, 255 )
				
				Hud_SetColorWithTable(Hud_GetChild( entityBar, "CoreLabel" ), file.coreLabelCoreBuildingFgColor)
				// RuiSetFloat3( Hud_GetRui(Hud_GetChild( entityBar, "CoreBg" )), "basicImageColor", <0, 0, 0> )
				Hud_SetScaleX(Hud_GetChild(entityBar, "CoreBg"), coreReadyFrac)

			}

			// Core-ready bling-bling
			if (IsCoreChargeAvailable(ent, soul)) {
				Hud_SetText(Hud_GetChild(entityBar, "CoreLabel"), format("%d", 100))
				// Hud_SetColor( Hud_GetChild( entityBar, "CoreLabel" ), LOCAL_R, LOCAL_G, LOCAL_B, 255 )
				Hud_SetColorWithTable(Hud_GetChild( entityBar, "CoreLabel" ), file.coreLabelCoreReadyFgColor)

				// RuiSetFloat( Hud_GetRui(Hud_GetChild( entityBar, "Core" )), "basicImageAlpha", 1.0 )
				// Hud_GetChild( entityBar, "CoreLabel" ).Hide()

				// RuiSetFloat3( Hud_GetRui(Hud_GetChild( entityBar, "CoreBg" )), "basicImageColor", <66, 66, 66> )
				// thread BlingBling(Hud_GetChild(entityBar, "CoreBg"), < 0, 0, 0 > , <66, 66, 66>)
				// thread BlingBling(Hud_GetChild(entityBar, "Core"), < 255, 255, 255 > , < 128, 128, 128 > , 0.4, 1.0, 255, 128)
			}




			// vanguard
			if (GetPlayerTitanClass(ent) == "vanguard" && HasTitan(ent))
				SetVanguardIcons(entityBar, ent)
			
			
		}


	
	}
	
	// Player has no titan
	else if (!HasTitan(ent) && titanIcon != $"" && GameRules_GetGameMode() == FD)
	{

		try {
			if (GetGlobalNetInt("FD_currentWave") > 0) {
				
				// + ent.GetPlayerNetFloat( EARNMETER_OWNEDFRAC )
				float meter = ent.GetPlayerNetFloat( EARNMETER_EARNEDFRAC )
				// float meter = ent.GetPlayerNetFloat( EARNMETER_OWNEDFRAC )
		
				Hud_GetChild( entityBar, "Core" ).Show()
				Hud_GetChild( entityBar, "CoreLabel" ).Show()
		
				RuiSetImage( Hud_GetRui(Hud_GetChild( entityBar, "Core" )), "basicImage", titanIcon)
				Hud_SetText(Hud_GetChild(entityBar, "CoreLabel"), format("%d", (meter * 100)+ 0.5))
				// Hud_SetColor( Hud_GetChild( entityBar, "CoreLabel" ), LOCAL_R, LOCAL_G, LOCAL_B, 255 )
				Hud_SetColorWithTable(Hud_GetChild( entityBar, "CoreLabel" ), file.coreLabelTitanBuildingFgColor)
		
		
		
				// printt(ent.GetPlayerName(), "With EARNMETER_EARNEDFRAC", ent.GetPlayerNetFloat(EARNMETER_EARNEDFRAC),
				//  "and EARNMETER_OWNEDFRAC", ent.GetPlayerNetFloat( EARNMETER_OWNEDFRAC ))
			}
		} catch (exception){
			float meter = ent.GetPlayerNetFloat( EARNMETER_EARNEDFRAC )

			Hud_GetChild( entityBar, "Core" ).Show()
			Hud_GetChild( entityBar, "CoreLabel" ).Show()
	
			RuiSetImage( Hud_GetRui(Hud_GetChild( entityBar, "Core" )), "basicImage", titanIcon)
			Hud_SetText(Hud_GetChild(entityBar, "CoreLabel"), format("%d", (meter * 100)+ 0.5))

			Hud_SetColorWithTable(Hud_GetChild( entityBar, "CoreLabel" ), file.coreLabelTitanBuildingFgColor)
	

		}
		
	}



	

	///////////////////////////////////////////// Autotian


	if (IsValid(ent.GetPetTitan()))
	{
		RuiSetImage( Hud_GetRui(Hud_GetChild( entityBar, "EntityImageAutotitan" )), "basicImage",GetPlayerTitanIcon(ent))
		Hud_GetChild( entityBar, "EntityImageAutotitan" ).Show()



		// printt("start", startValue, "end", endValue, "current", currentValue, "frac", frac)
		float autoTitanFrac = ent.GetPetTitan().GetHealth().tofloat() / ent.GetPetTitan().GetMaxHealth()
		Hud_SetScaleX( Hud_GetChild( entityBar, "BarFillAutotitan" ), autoTitanFrac )

		Hud_SetColorWithTable(Hud_GetChild(entityBar, "BarFillAutotitan"), file.healthbarAutotitanFgColor)
		
		// Hud_SetColor( Hud_GetChild( entityBar, "BarFillAutotitan" ), 161, 214, 0, 255 )
		// Doom color
		if ( GetDoomedState( ent.GetPetTitan() )) {
			Hud_SetColorWithTable(Hud_GetChild(entityBar, "BarFillAutotitan"), file.healthbarDoomFgColor)

			// Hud_SetColor( Hud_GetChild( entityBar, "BarFillAutotitan" ), BURN_R, BURN_G, BURN_B, 255 )
		}
		
		Hud_GetChild( entityBar, "BarFillAutotitan" ).Show()

	}
	else if (ent.IsTitan()) {
		// player on titan. Shield. ent.GetShieldHealth() is not for player
		// not available.
		entity soul = ent.GetTitanSoul()
		

		if (IsValid(soul)) {
			// Hud_GetChild( entityBar, "BarFillShield" ).Show()
			// Hud_GetChild( entityBar, "BarFillShieldBg" ).Show()
			// Hud_SetScaleX(Hud_GetChild(entityBar, "BarFillShield"), float(soul.GetShieldHealth()) / float(soul.GetShieldHealthMax()))
			
			float frac = float(soul.GetShieldHealth()) / float(soul.GetShieldHealthMax())
			const HeaderRatio = 0.99
	
			
			Hud_SetColorWithTable(Hud_GetChild(entityBar, "BarFillShield"), file.healthbarShieldFgColor)
			// Hud_SetColor( Hud_GetChild( entityBar, "BarFillShield" ), 87, 255, 255, 255 )
			Hud_GetChild( entityBar, "BarFillShield" ).Show()
	
			// HEADER
			if (frac >= HeaderRatio) {
				float headerFrac = (frac - HeaderRatio) / (1.0 - HeaderRatio)
				Hud_SetScaleX(Hud_GetChild(entityBar, "BarFillShieldHeader"), headerFrac)
				// Hud_SetColor( Hud_GetChild( entityBar, "BarFillShieldHeader" ), 87, 255, 255, 255 )
				Hud_SetColorWithTable(Hud_GetChild(entityBar, "BarFillShieldHeader"), file.healthbarShieldFgColor)
				
				Hud_GetChild( entityBar, "BarFillShieldHeader" ).Show()
				
				frac = 1.0
			}
			else
			{
				frac *= HeaderRatio
			}


			// Hud_GetChild( entityBar, "Money" ).Hide()
			// if (BoostStoreOpen()) {
			// 	Hud_SetColorWithTable(Hud_GetChild(entityBar, "Money"), file.healthbarShieldFgColor)

			// 	Hud_SetText(Hud_GetChild(entityBar, "Money"), format("%d/%d %f", soul.GetShieldHealth()), float(soul.GetShieldHealthMax()), frac)
			// 	Hud_GetChild( entityBar, "Money" ).Show()
	
			// 	// printt(titleString, ent.GetPlayerNetInt("FD_money256"), ent.GetPlayerNetInt( "FD_money256" ) * 256)
			// 	// printt(titleString, ent.GetPlayerNetInt( "FD_money256" ))
			// 	// printt(titleString, money)
			// }
	
			Hud_SetScaleX(Hud_GetChild(entityBar, "BarFillShield"), frac)

		}

		
		// RuiTrackFloat( file.cockpitRui, "shieldFrac", player, RUI_TRACK_SHIELD_FRACTION )
		
	}

	





	////////////////// clean

	// Hud_GetChild( entityBar, "CoreLabel" ).Hide()
	Hud_GetChild( entityBar, "EntityImageBattery" ).Hide()
	Hud_GetChild(entityBar, "SmokeCount").Hide()
	//////////
	if (IsValid(ent) && ent.IsPlayer() && IsAlive(ent) && GameRules_GetGameMode() == FD) {
		int numShieldBoosts = ent.GetPlayerNetInt( "numHarvesterShieldBoost" )
		int numCoreOverload = ent.GetPlayerNetInt( "numSuperRodeoGrenades" )
		int money = ent.GetPlayerNetInt( "FD_money256" ) * 256 + ent.GetPlayerNetInt( "FD_money256" )
		
		var shieldBoostHud = Hud_GetChild(entityBar, "ShieldBoostCount")
		shieldBoostHud.Hide()
		if ( numShieldBoosts > 0 )
		{
			RuiSetImage( Hud_GetRui(Hud_GetChild( entityBar, "ShieldBoost" )), "basicImage",$"rui/menu/boosts/boost_icon_harvester_shield")
			Hud_GetChild( entityBar, "ShieldBoost" ).Show()

			shieldBoostHud.Show()
			Hud_SetText( shieldBoostHud, "" + numShieldBoosts )
		}
		else
			Hud_GetChild( entityBar, "ShieldBoost" ).Hide()

		var coreOverloadHud = Hud_GetChild(entityBar, "NuclearCount")
		coreOverloadHud.Hide()
		if ( numCoreOverload > 0 )
		{
			RuiSetImage( Hud_GetRui(Hud_GetChild( entityBar, "Nuclear" )), "basicImage", $"rui/menu/boosts/boost_icon_core_overload" )
			Hud_GetChild( entityBar, "Nuclear" ).Show()

			coreOverloadHud.Show()
			Hud_SetText( coreOverloadHud, "" + numCoreOverload )
		}
		else
			Hud_GetChild( entityBar, "Nuclear" ).Hide()

		Hud_GetChild( entityBar, "Money" ).Hide()
		if (BoostStoreOpen()) {
			Hud_SetColor( Hud_GetChild(entityBar, "Money"), 255, 215, 0, 255 )
			Hud_SetText(  Hud_GetChild(entityBar, "Money"), format("$%05d", GetPlayerMoney(ent)))
			Hud_GetChild( entityBar, "Money" ).Show()

			// printt(titleString, ent.GetPlayerNetInt("FD_money256"), ent.GetPlayerNetInt( "FD_money256" ) * 256)
			// printt(titleString, ent.GetPlayerNetInt( "FD_money256" ))
			// printt(titleString, money)
		}
		else
		{
			// printt(ent.GetPlayerName(),  ent.GetPlayerGameStat( PGS_SCORE ))
			Hud_SetColor( Hud_GetChild(entityBar, "Money"), 255, 255, 255, 255 )
			Hud_SetText(Hud_GetChild(entityBar, "Money"), format("%06d", ent.GetPlayerGameStat( PGS_DETONATION_SCORE )))
			// Hud_SetText(Hud_GetChild(entityBar, "Money"), format("%d+%d", ent.GetPlayerGameStat(PGS_ASSAULT_SCORE), ent.GetPlayerGameStat( PGS_DEFENSE_SCORE )))
			Hud_GetChild( entityBar, "Money" ).Show()
		}




		if (ent.IsTitan()) {
			// kit2
			foreach (string name, int passive in titanKit2Table) {
				if (PlayerHasPassive( ent, passive )) {
					RuiSetImage( Hud_GetRui(Hud_GetChild( entityBar, "EntityImageAutotitan" )), "basicImage", GetItemImage( name ))
					Hud_GetChild( entityBar, "EntityImageAutotitan" ).Show()
					break
				}
			}

			// Elec-smoke
			var smokeCountHud = Hud_GetChild(entityBar, "SmokeCount")
			// smokeCountHud.Hide()
			if (PlayerHasWeapon(ent, "mp_titanability_electric_smoke")) {
				RuiSetImage( Hud_GetRui(Hud_GetChild( entityBar, "Smoke" )), "basicImage", $"rui/titan_loadout/tactical/titan_tactical_electric_smoke" )
				Hud_GetChild( entityBar, "Smoke" ).Show()

				entity soul = ent.GetTitanSoul()
				if (IsValid(soul) && GetTitanCharacterName(soul.GetTitan()) == "vanguard") {
					int currentUpgradeCount = soul.GetTitanSoulNetInt( "upgradeCount" )
					if (currentUpgradeCount >= 2 && PlayerHasPassive(ent, ePassives.PAS_VANGUARD_CORE5))
						RuiSetImage( Hud_GetRui(Hud_GetChild( entityBar, "Smoke" )), "basicImage", $"rui/titan_loadout/passive/monarch_core_maelstrom" )
				}



				entity offhandWeapon = ent.GetOffhandWeapon( OFFHAND_INVENTORY )
				if (IsValid(offhandWeapon)) {
					// printt(ent.GetPlayerName(), "has Smoke In Inv:", offhandWeapon.GetWeaponPrimaryClipCount())
				
					try {
						smokeCountHud.Show()

						int segments = ent.GetWeaponAmmoStockpile( offhandWeapon )
						segments += offhandWeapon.GetWeaponPrimaryClipCount()
						Hud_SetText( smokeCountHud, "" + segments )
						Hud_SetColor( smokeCountHud, PARTY_R, PARTY_G, PARTY_B, 255 )
					} catch (exception){
						smokeCountHud.Hide()

						// printt(ent.GetPlayerName(), "IS NOT LOCAL PLAYER. Can't Call GetWeaponPrimaryClipCountMax() on Smoke")
					}

				}
			}
			else
				Hud_GetChild( entityBar, "Smoke" ).Hide()
	

		}

		// pilot stuff
		else
		{

			// Battery stuff
			int battery = HasBattery(ent)
			if (battery > 0) {
				RuiSetImage( Hud_GetRui(Hud_GetChild( entityBar, "EntityImageBattery" )), "basicImage",
						$"rui/hud/battery/battery_capture_friendly")
				
			if (battery == 2)
				RuiSetImage( Hud_GetRui(Hud_GetChild( entityBar, "EntityImageBattery" )), "basicImage",
						$"rui/hud/battery/battery_capture_enemy")
				Hud_GetChild( entityBar, "EntityImageBattery" ).Show()
				
			}



		}
	}
	// SetVanguardIcons(entityBar, ent)

	
	Hud_SetAlpha(Hud_GetChild( entityBar, "CoreLabel" ), file.avatarAlpha * 255)
	Hud_SetAlpha(Hud_GetChild( entityBar, "BarDesc" ), file.healthbarLabelAlpha * 255)
	Hud_SetAlpha(Hud_GetChild( entityBar, "Money" ), file.moneyLabelAlpha * 255)
	Hud_SetAlpha(Hud_GetChild( entityBar, "BarFillAutotitan" ), file.coreLabelAlpha * 255)
	// Hud_SetAlpha(Hud_GetChild( entityBar, "CoreBg" ), file.coreProgressAlpha)
	// Hud_SetAlpha(Hud_GetChild( entityBar, "CoreBgStatic" ), file.coreBgAlpha)
	RuiSetFloat( Hud_GetRui(Hud_GetChild( entityBar, "CoreBg" )), "basicImageAlpha", file.coreProgressAlpha * file.panelAlpha)
	RuiSetFloat(Hud_GetRui(Hud_GetChild(entityBar, "CoreBgStatic")), "basicImageAlpha", file.coreBgAlpha * file.panelAlpha)
	RuiSetFloat(Hud_GetRui(Hud_GetChild(entityBar, "EntityImageAutotitan")), "basicImageAlpha", file.avatarAlpha * file.panelAlpha)
	
	entityBar.Show()



		// Cheater check
	if (!IsLobby() && GameRules_GetGameMode() != FD) {
		GetLocalClientPlayer().cv.hudCheaterMessage.Show()
	}
}

void function ResetVanguardIcons(var entityBar) {
	array upgradeArr = [
		Hud_GetChild(entityBar, "VanguardUpgrade0"),
		Hud_GetChild(entityBar, "VanguardUpgrade1"),
		Hud_GetChild(entityBar, "VanguardUpgrade2"), 
		Hud_GetChild(entityBar, "VanguardUpgrade3")
]
	foreach (var upgrade in upgradeArr) {
		upgrade.Hide()
	}
}

// TODO: Refine this func.
void function SetVanguardIcons(var entityBar, entity ent)
{

	ResetVanguardIcons(entityBar)
	entity soul = ent.GetTitanSoul()
	if (!IsValid(soul)) {
		return
	}

	array upgradeArr = [
		Hud_GetChild(entityBar, "VanguardUpgrade0"),
		Hud_GetChild(entityBar, "VanguardUpgrade1"),
		Hud_GetChild(entityBar, "VanguardUpgrade2"), 
		Hud_GetChild(entityBar, "VanguardUpgrade3")
]

	int currentUpgradeCount = soul.GetTitanSoulNetInt( "upgradeCount" )

	for (int i = 1; i <= min(currentUpgradeCount, 3); i++) {
		RuiSetImage(Hud_GetRui(upgradeArr[i]), "basicImage", GetVanguardCoreIcon(ent, i))
		upgradeArr[i].Show()
	}

	RuiSetImage(Hud_GetRui(upgradeArr[0]), "basicImage", GetVanguardCoreIcon(ent, 0))
	upgradeArr[0].Show()
}


asset function GetVanguardCoreIcon( entity player, int index = 1 )
{
	Assert( player.IsPlayer() )
	GetVanguardNextUpgradeIcon(player)
	PlayerInfo playerInfo = GetPlayerInfo(player)


	switch (index) {
		case 0:
			return playerInfo.vanguardCoreIcon0; //Apex
		case 1:
			return playerInfo.vanguardCoreIcon1;
		case 2:
			return playerInfo.vanguardCoreIcon2;
		case 3:
			return playerInfo.vanguardCoreIcon3;
		default:
			break;
	}

	return Dev_GetPlayerSettingAssetByKeyField_Global( "titan_atlas_vanguard", "core_building_icon" )
}

asset function GetVanguardNextUpgradeIcon(entity ent) {
	entity soul = ent.GetTitanSoul()
	if ( !IsValid( soul ) )
		return $""
		
	int currentUpgradeCount = soul.GetTitanSoulNetInt( "upgradeCount" )
	PlayerInfo playerInfo = GetPlayerInfo(ent)
	
	asset apex = $""
	entity weapon = ent.GetMainWeapons()[0]
	entity offhandWeapon = ent.GetOffhandWeapon( OFFHAND_RIGHT )
	
	// Apex
	if ( IsValid( weapon ) && !PlayerHasPassive( ent, ePassives.PAS_VANGUARD_CORE1 ) && ( weapon.HasMod( "arc_rounds" ) || weapon.HasMod( "arc_rounds_with_battle_rifle" ) ) )
		apex = GetItemImage( "pas_vanguard_core1" )
	if ( IsValid( offhandWeapon ) && !PlayerHasPassive( ent, ePassives.PAS_VANGUARD_CORE2 ) && ( offhandWeapon.HasMod( "missile_racks" ) || offhandWeapon.HasMod( "upgradeCore_MissileRack_Vanguard" ) ) )
		apex = GetItemImage( "pas_vanguard_core2" )
	
	offhandWeapon = ent.GetOffhandWeapon( OFFHAND_LEFT )
	if ( IsValid( offhandWeapon ) && !PlayerHasPassive( ent, ePassives.PAS_VANGUARD_CORE3 ) && ( offhandWeapon.HasMod( "energy_transfer" ) || offhandWeapon.HasMod( "energy_field_energy_transfer" ) ) )
		apex = GetItemImage( "pas_vanguard_core3" )
	playerInfo.vanguardCoreIcon0 = apex
	
	// common
	asset icon = Dev_GetPlayerSettingAssetByKeyField_Global( "titan_atlas_vanguard", "core_building_icon" )
	if (currentUpgradeCount >= 0) {
		if ( PlayerHasPassive( ent, ePassives.PAS_VANGUARD_CORE1 ) )  // Arc Rounds
			icon = GetItemImage( "pas_vanguard_core1" )
		if ( PlayerHasPassive( ent, ePassives.PAS_VANGUARD_CORE2 ) ) //Missile Racks
			icon = GetItemImage( "pas_vanguard_core2" )
		if ( PlayerHasPassive( ent, ePassives.PAS_VANGUARD_CORE3 ) ) //Energy Transfer
			icon = GetItemImage( "pas_vanguard_core3" )
		playerInfo.vanguardCoreIcon1 = icon
	}

	if (currentUpgradeCount >= 1) {
		if ( PlayerHasPassive( ent, ePassives.PAS_VANGUARD_CORE4 ) )  // Rapid Rearm
			icon = GetItemImage( "pas_vanguard_core4" )
		if ( PlayerHasPassive( ent, ePassives.PAS_VANGUARD_CORE5 ) ) //Maelstrom
			icon = GetItemImage( "pas_vanguard_core5" )
		if ( PlayerHasPassive( ent, ePassives.PAS_VANGUARD_CORE6 ) ) //Energy Field
			icon = GetItemImage( "pas_vanguard_core6" ) 
		playerInfo.vanguardCoreIcon2 = icon
	}

	if (currentUpgradeCount >= 2) {
		if ( PlayerHasPassive( ent, ePassives.PAS_VANGUARD_CORE7 ) )  // Multi-Target Missiles
			icon = GetItemImage( "pas_vanguard_core7" ) 
		if ( PlayerHasPassive( ent, ePassives.PAS_VANGUARD_CORE8 ) ) //Superior Chassis
			icon = GetItemImage( "pas_vanguard_core8" ) 
		if ( PlayerHasPassive( ent, ePassives.PAS_VANGUARD_CORE9 ) ) //XO-16 Battle Rifle
			icon = GetItemImage( "pas_vanguard_core9" )
		playerInfo.vanguardCoreIcon3 = icon
	}


	
	// printt(ent.GetPlayerName(), "currentUpgradeCount:", currentUpgradeCount)
	switch (currentUpgradeCount) {
		case 0:
			return playerInfo.vanguardCoreIcon1
		case 1:
			return playerInfo.vanguardCoreIcon2
		case 2:
			return playerInfo.vanguardCoreIcon3
		}

	return Dev_GetPlayerSettingAssetByKeyField_Global( "titan_atlas_vanguard", "core_building_icon" )
	
}

void function TrySetBgColor(var entityBar, entity player) {
	Hud_GetChild( entityBar, "EntityImageBg" ).Hide()
	string name = player.GetPlayerName()
	if (name in file.playerColor) {
		Hud_GetChild( entityBar, "EntityImageBg" ).Show()
		RuiSetFloat3( Hud_GetRui( Hud_GetChild( entityBar, "EntityImageBg" ) ), "basicImageColor", file.playerColor[name] )
		
		printt(name, file.playerColor[name])
	}
	else
	{
		if (player.IsTitan()) {
			file.playerColor[name] <- GetBgColorFromTitan(player)
		}
		else if (IsValid(player.GetPetTitan())) {
			file.playerColor[name] <- GetBgColorFromTitan(player.GetPetTitan())
		}
	}
}


vector function GetBgColorFromTitan(entity titan) {
	switch (GetTitanCharacterName(titan).toupper()) {
		case "RONIN" :
			return <191, 191, 191>

		case "NORTHSTAR" :
			return <255, 237, 174>

		case "TONE" :
			return <36, 71, 210>

		case "ION" :
			return <187, 38, 36>

		case "SCORCH" :
			return <255, 179, 28>

		case "LEGION" :
			return <12, 12, 12>

		case "VANGUARD" :
			return <193, 174, 255>
	}

	return < 0, 0, 0>
}

// TODO: REFINE. Record score of every wave.
int function UpdateScoreInWave(entity player)
{
	if (!IsValid(player)) {
		return 0
	}
	string name = player.GetPlayerName()
	int waveNum = GetGlobalNetInt( "FD_currentWave" ) + 1

	if (!(name in file.waveScores)) {
		file.waveScores[name] <- 0

		if (true) {
			
		}
	}


	return player.GetPlayerGameStat( PGS_DETONATION_SCORE ) - file.waveScores[name]
}

void function ClearScoreInWave(int pointValue,entity player)
{
	if (!IsValid(player)) {
		return
	}

	string name = player.GetPlayerName()
	int waveNum = GetGlobalNetInt( "FD_currentWave" ) + 1

	if (! (name in file.waveScores)) {
		file.waveScores[name] <- 0
	}

	if (waveNum == 1) {
		file.waveScores[name] = player.GetPlayerGameStat( PGS_DETONATION_SCORE )
	}
	file.waveScores[name] = player.GetPlayerGameStat( PGS_DETONATION_SCORE ) - file.waveScores[name]
}

int function HasBattery (entity ent) {

	if ( ent.IsPlayer() )
	{
		array<entity> batteries = GetClientEntArrayBySignifier( "item_titan_battery" )
		foreach ( entity battery in batteries )
		{
			entity batteryParent = battery.GetParent()
			if ( batteryParent == ent )
			{
				// printt(ent.GetPlayerName(), "Has battery,", battery, " with class ", battery.GetClassName())
				// C_HealthKit
				if (IsAmpedBattery(battery)) 
					return 2
				// printt("battery.GetSkin()", battery.GetSkin())
				return 1
			}
		}
	}

	return 0
}

void
function BlingBling(var aHudElement, vector color1, vector color2, float between = 0.4, float duration = 1.0, int alpha1 = 255, int alpha2 = 255)
{
	float time = 0
	bool isColor1 = true

	while (time <= duration) {
		if (isColor1) {
			RuiSetFloat3( Hud_GetRui(aHudElement), "basicImageColor", color1 )
			try {
				Hud_SetColor( aHudElement, color1.x, color1.y, color1.z, alpha1 )
			} catch (exception){
				printt("BlingBling", exception)
			} 
		}
		else
		{
			RuiSetFloat3( Hud_GetRui(aHudElement), "basicImageColor", color2 )
			try {
				Hud_SetColor( aHudElement, color2.x, color2.y, color2.z, alpha2 )
			} catch (exception2){
				printt("BlingBling", exception2)
				
			}
		}

		isColor1 = !isColor1
		wait between
		time += between
	}
}

void function PrintPlayerInfo(PlayerInfo playerInfo) {
	printt("-------PlayerInfo--------")
	printt("---Player:", playerInfo.playerName)
	printt("---titanClass:", playerInfo.titanClass)
	printt("---titanCoreIcon:", playerInfo.titanCoreIcon)

	printt("\n")

	printt("---vanguardCoreIcon0:", playerInfo.vanguardCoreIcon0)
	printt("---vanguardCoreIcon1:", playerInfo.vanguardCoreIcon1)
	printt("---vanguardCoreIcon2:", playerInfo.vanguardCoreIcon2)
	printt("---vanguardCoreIcon3:", playerInfo.vanguardCoreIcon3)

	printt("\n")

	printt("---color:", playerInfo.color)
	printt("---bar:", playerInfo.bar)

	printt("\n")

}

void function SetPlayerBar(entity player, var bar)
{
	PlayerInfo playerInfo = GetPlayerInfo(player)
	playerInfo.bar = bar
}

PlayerInfo function GetPlayerInfo(entity player) {
	PlayerInfo playerInfo
	if (!player.IsPlayer() || !IsValid(player)) 
		return playerInfo
	string name = player.GetPlayerName()
	if (!(name in file.playerInfos)) 
		file.playerInfos[name] <- playerInfo
	playerInfo.playerName = name

	// PrintPlayerInfo(file.playerInfos[name])
	return file.playerInfos[name]
}

string function GetPlayerTitanClass(entity player) {
	if (!player.IsPlayer() || !IsValid(player)) 
		return ""
		
	PlayerInfo playerInfo = GetPlayerInfo(player)

	if (playerInfo.titanClass != "") 
		return playerInfo.titanClass
	
	if (player.IsTitan()) 
		playerInfo.titanClass = GetTitanCharacterName(player)
	else if (IsValid(player.GetPetTitan()))
		playerInfo.titanClass = GetTitanCharacterName(player.GetPetTitan())

	
	return playerInfo.titanClass
} 

asset function GetPlayerTitanIcon(entity player)
{
	if (!player.IsPlayer() || !IsValid(player)) 
		return $""
	
	string Titanclass = GetPlayerTitanClass(player)

	if (Titanclass == "") 
		return $"rui/hud/earn_meter/titan_building"

	return GetIconForTitanClass(Titanclass)
}

asset function GetPlayerCoreIcon(entity player)
{
	if (!player.IsPlayer() || !IsValid(player)) 
		return $""
	
	string Titanclass = GetPlayerTitanClass(player)
	PlayerInfo playerInfo = GetPlayerInfo(player)

	if (GetPlayerTitanClass(player) == "vanguard" && player.IsTitan()) {
		playerInfo.titanCoreIcon = GetVanguardNextUpgradeIcon(player)
	}

	if (playerInfo.titanCoreIcon != $"") 
		return playerInfo.titanCoreIcon

	entity titan
	var functionref(entity) GetIcon = function(entity ent): (player, playerInfo)
	{
		entity weapon = ent.GetOffhandWeapon( OFFHAND_EQUIPMENT )
		if (GetPlayerTitanClass(player) == "vanguard")
			playerInfo.titanCoreIcon = GetVanguardNextUpgradeIcon(player)
		else
			playerInfo.titanCoreIcon = GetWeaponInfoFileKeyFieldAsset_WithMods_Global(weapon.GetWeaponClassName(), weapon.GetMods(), "hud_icon")
	
	}

	if (player.IsTitan()) 
		GetIcon(player)
	else if (IsValid(player.GetPetTitan()))
		GetIcon(player.GetPetTitan())
	// else
	// 	return $"rui/hud/earn_meter/core_ready"


	
	return playerInfo.titanCoreIcon
}

bool function HasTitan(entity player) {
	return player.IsTitan() || IsValid(player.GetPetTitan())
}

// PORTED FORM void function InitOffhandRui( var rui, entity player, entity weapon )
void function UpdateAbilityHud( var rui, entity player)
{
	
	entity titan, soul, weapon;
	if (player.IsTitan()) 
	{
		titan = player;
		soul = player.GetTitanSoul()
	}
	else if (IsValid(player.GetPetTitan()))
	{
		titan = player.GetPetTitan();
		soul = titan.GetTitanSoul()
	}

	if (IsValid(titan) && IsValid(soul)) {
		weapon = titan.GetOffhandWeapon( OFFHAND_EQUIPMENT )
	}

	RuiSetGameTime( rui, "hintTime", Time() )

	RuiSetBool( rui, "isTitan", player.IsTitan() )
	RuiSetBool( rui, "isVisible", true )
	RuiSetBool( rui, "isReverseCharge", false )

	RuiSetFloat( rui, "chargeFrac", 0.0 )
	RuiSetFloat( rui, "useFrac", 0.0 )
	RuiSetFloat( rui, "chargeMaxFrac", 1.0 )
	RuiSetFloat( rui, "minFireFrac", 1.0 )
	RuiSetInt( rui, "segments", 1 )
	RuiSetFloat( rui, "refillRate", 1 ) // default to 1 to preserve default behavior. some abilities draw the refillRecharge, even without a rate setting



	RuiSetFloat( rui, "chargeFracCaution", 0.0 )
	RuiSetFloat( rui, "chargeFracAlert", 0.0 )
	RuiSetFloat( rui, "chargeFracAlertSpeed", 16.0 )
	RuiSetFloat( rui, "chargeFracAlertScale", 1.0 )

	if (IsValid(weapon)) {
		float coreExpireFrac = soul.GetTitanSoulNetFloat( "coreExpireFrac" )
		float coreAvailableFrac = soul.GetTitanSoulNetFloat( "coreAvailableFrac" )

		RuiSetImage( rui, "hudIcon", GetPlayerCoreIcon(player) )

		RuiSetFloat( rui, "chargeFrac",  coreAvailableFrac)
		RuiSetFloat( rui, "readyFrac", 0.0 )
		RuiSetFloat( rui, "dryfireFrac", 0.0 )

	}
	else if(!HasTitan(player))
	{
		RuiSetImage( rui, "hudIcon", GetPlayerTitanIcon(player) )


		// RuiSetInt( rui, "segments", ammoClipSize / ammoPerShot )

		RuiSetFloat( rui, "chargeFrac",  player.GetPlayerNetFloat( EARNMETER_OWNEDFRAC ))
		RuiSetFloat( rui, "readyFrac", 0.0 )

	}
}


void function InitOffhandRui( var rui, entity player, entity weapon )
{
	RuiSetGameTime( rui, "hintTime", Time() )

	RuiSetBool( rui, "isTitan", player.IsTitan() )
	RuiSetBool( rui, "isVisible", true )
	RuiSetBool( rui, "isReverseCharge", false )

	RuiSetFloat( rui, "chargeFrac", 0.0 )
	RuiSetFloat( rui, "useFrac", 0.0 )
	RuiSetFloat( rui, "chargeMaxFrac", 1.0 )
	RuiSetFloat( rui, "minFireFrac", 1.0 )
	RuiSetInt( rui, "segments", 1 )
	RuiSetFloat( rui, "refillRate", 1 ) // default to 1 to preserve default behavior. some abilities draw the refillRecharge, even without a rate setting

	RuiTrackImage( rui, "hudIcon", weapon, RUI_TRACK_WEAPON_HUD_ICON )

	RuiTrackFloat( rui, "readyFrac", weapon, RUI_TRACK_WEAPON_READY_TO_FIRE_FRACTION )
	RuiTrackFloat( rui, "dryfireFrac", weapon, RUI_TRACK_WEAPON_DRYFIRE_FRACTION )

	RuiSetFloat( rui, "chargeFracCaution", 0.0 )
	RuiSetFloat( rui, "chargeFracAlert", 0.0 )
	RuiSetFloat( rui, "chargeFracAlertSpeed", 16.0 )
	RuiSetFloat( rui, "chargeFracAlertScale", 1.0 )

	switch ( weapon.GetWeaponInfoFileKeyField( "cooldown_type" ) )
	{
		case "ammo":
			int ammoClipSize = weapon.GetWeaponSettingInt( eWeaponVar.ammo_clip_size )
			int ammoPerShot = weapon.GetWeaponSettingInt( eWeaponVar.ammo_per_shot )
			int ammoMinToFire = weapon.GetWeaponSettingInt( eWeaponVar.ammo_min_to_fire )

			RuiSetFloat( rui, "minFireFrac", float (  ammoMinToFire ) / float ( ammoClipSize ) )
			RuiSetInt( rui, "segments", ammoClipSize / ammoPerShot )

			RuiTrackFloat( rui, "chargeFrac", weapon, RUI_TRACK_WEAPON_CLIP_AMMO_FRACTION )

			RuiSetFloat( rui, "refillRate", weapon.GetWeaponSettingFloat( eWeaponVar.regen_ammo_refill_rate ) )
			break

		case "ammo_swordblock":
			RuiTrackFloat( rui, "chargeFrac", weapon, RUI_TRACK_WEAPON_STOCKPILE_REGEN_FRAC )
			RuiSetFloat( rui, "readyFrac", 0.0 )
			RuiSetFloat( rui, "minFireFrac", 0.0 )

			RuiSetFloat( rui, "chargeFracCaution", 0.6 )
			RuiSetFloat( rui, "chargeFracAlert", 0.0 )
			break

		case "ammo_alert":
			RuiSetFloat( rui, "chargeFrac", 0.0 )
			RuiSetFloat( rui, "readyFrac", 0.0 )
			RuiSetFloat( rui, "minFireFrac", 0.0 )

			RuiSetFloat( rui, "chargeFracCaution", 0.01 )
			RuiSetFloat( rui, "chargeFracAlert", -1.0 )
			RuiSetFloat( rui, "chargeFracAlertSpeed", 5.0 )
			RuiSetFloat( rui, "chargeFracAlertScale", 0.6 )
			break

		case "ammo_instant":
		case "ammo_deployed":
			int ammoClipSize = weapon.GetWeaponSettingInt( eWeaponVar.ammo_clip_size )
			int ammoPerShot = weapon.GetWeaponSettingInt( eWeaponVar.ammo_per_shot )
			int ammoMinToFire = weapon.GetWeaponSettingInt( eWeaponVar.ammo_min_to_fire )

			RuiSetFloat( rui, "minFireFrac", float (  ammoMinToFire ) / float ( ammoClipSize ) )
			RuiSetInt( rui, "segments", ammoClipSize / ammoPerShot )

			RuiTrackFloat( rui, "chargeFrac", weapon, RUI_TRACK_WEAPON_CLIP_AMMO_FRACTION )
			RuiSetFloat( rui, "readyFrac", 0.0 )

			RuiSetFloat( rui, "refillRate", weapon.GetWeaponSettingFloat( eWeaponVar.regen_ammo_refill_rate ) )
			break

		case "ammo_per_shot":
			int ammoClipSize = weapon.GetWeaponSettingInt( eWeaponVar.ammo_clip_size )
			int ammoPerShot = weapon.GetWeaponSettingInt( eWeaponVar.ammo_per_shot )
			int ammoMinToFire = weapon.GetWeaponSettingInt( eWeaponVar.ammo_min_to_fire )

			RuiSetFloat( rui, "minFireFrac", float (  ammoMinToFire ) / float ( ammoClipSize ) )
			RuiSetInt( rui, "segments", 1 )

			RuiTrackFloat( rui, "chargeFrac", weapon, RUI_TRACK_WEAPON_CLIP_AMMO_FRACTION )
			RuiSetFloat( rui, "readyFrac", 0.0 )

			RuiSetFloat( rui, "refillRate", weapon.GetWeaponSettingFloat( eWeaponVar.regen_ammo_refill_rate ) )
			break

		case "ammo_timed":
			int ammoClipSize = weapon.GetWeaponSettingInt( eWeaponVar.ammo_clip_size )
			int ammoPerShot = weapon.GetWeaponSettingInt( eWeaponVar.ammo_per_shot )
			int ammoMinToFire = weapon.GetWeaponSettingInt( eWeaponVar.ammo_min_to_fire )

			RuiSetFloat( rui, "minFireFrac", float (  ammoMinToFire ) / float ( ammoClipSize ) )
			RuiSetInt( rui, "segments", ammoClipSize / ammoPerShot )

			RuiTrackFloat( rui, "chargeFrac", weapon, RUI_TRACK_WEAPON_CLIP_AMMO_FRACTION )
			RuiSetFloat( rui, "readyFrac", 0.0 )

			RuiTrackFloat( rui, "useFrac", weapon, RUI_TRACK_STATUS_EFFECT_SEVERITY, eStatusEffect.simple_timer )

			RuiSetFloat( rui, "refillRate", weapon.GetWeaponSettingFloat( eWeaponVar.regen_ammo_refill_rate ) )
			break

		case "shared_energy":
			int curCost = weapon.GetWeaponCurrentEnergyCost() // 350

			RuiSetFloat( rui, "readyFrac", 0.0 )
			RuiSetFloat( rui, "chargeMaxFrac", float( curCost ) )
			RuiTrackFloat( rui, "chargeFrac", player, RUI_TRACK_PLAYER_SHARED_ENERGY )
			break

		case "shared_energy_drain":
			RuiSetFloat( rui, "readyFrac", 0.0 )
			RuiSetFloat( rui, "minFireFrac", 0.0 )
			RuiTrackFloat( rui, "chargeFrac", player, RUI_TRACK_PLAYER_SHARED_ENERGY )
			RuiSetFloat( rui, "chargeMaxFrac", float( ION_ENERGY_MAX ) )
			break

		case "vortex_drain":
			RuiSetBool( rui, "isReverseCharge", true )
			RuiSetFloat( rui, "chargeFrac", 1.0 )
			RuiSetFloat( rui, "readyFrac", 0.0 )
			RuiSetFloat( rui, "minFireFrac", 0.0 )

			RuiTrackFloat( rui, "chargeFrac", weapon, RUI_TRACK_WEAPON_CHARGE_FRACTION )
			break

		case "charged_shot":
			RuiSetBool( rui, "isReverseCharge", true )
			RuiSetFloat( rui, "chargeFrac", 1.0 )
			RuiSetFloat( rui, "readyFrac", 0.0 )
			RuiSetFloat( rui, "minFireFrac", 0.2 )

			RuiTrackFloat( rui, "chargeFrac", weapon, RUI_TRACK_WEAPON_CHARGE_FRACTION )
			break

		case "chargeFrac":
			RuiTrackFloat( rui, "chargeFrac", weapon, RUI_TRACK_WEAPON_CHARGE_FRACTION )
			break

		case "smart":
			RuiSetBool( rui, "isReverseCharge", true )
			RuiTrackFloat( rui, "chargeFrac", weapon, RUI_TRACK_WEAPON_CHARGE_FRACTION )
			RuiSetFloat( rui, "readyFrac", 0.0 )
			RuiTrackFloat( rui, "dryfireFrac", weapon, RUI_TRACK_WEAPON_DRYFIRE_FRACTION )
			break

		case "debug":
			RuiTrackFloat( rui, "chargeFrac", weapon, RUI_TRACK_WEAPON_CHARGE_FRACTION )
			RuiTrackFloat( rui, "readyFrac", weapon, RUI_TRACK_WEAPON_READY_TO_FIRE_FRACTION )
			//RuiTrackFloat( rui, "dryfireFrac", weapon, RUI_TRACK_WEAPON_DRYFIRE_FRACTION )
			RuiTrackFloat( rui, "dryfireFrac", weapon, RUI_TRACK_WEAPON_SMART_AMMO_LOCK_FRACTION )
			break

		case "grapple":
			int ammoClipSize = 100
			float ammoMinToFire = weapon.GetWeaponSettingFloat( eWeaponVar.grapple_power_required )

			RuiSetFloat( rui, "minFireFrac", ammoMinToFire / float ( ammoClipSize ) )
			RuiSetInt( rui, "segments", int( ammoClipSize / ammoMinToFire ) )
			RuiTrackFloat( rui, "chargeFrac", player, RUI_TRACK_PLAYER_GRAPPLE_POWER )
			break

		default:
			float refillRate = weapon.GetWeaponSettingFloat( eWeaponVar.regen_ammo_refill_rate )

			if ( refillRate > 0 )
			{
				//printt( "HUD: ", weapon.GetWeaponClassName(), "using", "refillRate" )
				int ammoClipSize = weapon.GetWeaponSettingInt( eWeaponVar.ammo_clip_size )
				int ammoPerShot = weapon.GetWeaponSettingInt( eWeaponVar.ammo_per_shot )
				int ammoMinToFire = weapon.GetWeaponSettingInt( eWeaponVar.ammo_min_to_fire )

				RuiSetFloat( rui, "minFireFrac", float (  ammoMinToFire ) / float ( ammoClipSize ) )
				RuiSetInt( rui, "segments", ammoClipSize / ammoPerShot )

				RuiTrackFloat( rui, "chargeFrac", weapon, RUI_TRACK_WEAPON_CLIP_AMMO_FRACTION )
			}
			else
			{
				float chargeTime = weapon.GetWeaponSettingFloat( eWeaponVar.charge_time )
				if ( chargeTime == 0 )
				{
					//printt( "HUD: ", weapon.GetWeaponClassName(), "using", "chargeTime == 0" )
					float fireDuration = weapon.GetWeaponSettingFloat( eWeaponVar.fire_duration )
					printt( weapon.GetWeaponClassName(), fireDuration )
					RuiSetBool( rui, "isReverseCharge", true )
					RuiTrackFloat( rui, "chargeFrac", weapon, RUI_TRACK_WEAPON_READY_TO_FIRE_FRACTION )
				}
				else
				{
					//printt( "HUD: ", weapon.GetWeaponClassName(), "using", "chargeTime" )
					RuiTrackFloat( rui, "chargeFrac", weapon, RUI_TRACK_WEAPON_CHARGE_FRACTION )
				}
			}
			break
	}
}
void function UpdateOffhandRuiVisibility( var rui, string hintText )
{
	if ( GetConVarInt( "hud_setting_showButtonHints" ) != 0 )
		RuiSetString( rui, "hintText", hintText )
	else
		RuiSetString( rui, "hintText", "" )
}

int function GetPlayerAgeisLevel(entity player) {
	entity soul = GetPlayerTitanSoul(player)
	entity titan
	if (!IsValid(soul)) 
		return -1
	
	titan = soul.GetTitan()
	if (!IsValid(titan)) 
		return -1

	

	PlayerInfo playerInfo = GetPlayerInfo(player)
	switch (GetPlayerTitanClass(player)) {
		case "legion":
			entity shieldWeapon = player.GetOffhandWeapon( OFFHAND_LEFT )
			if (IsValid(shieldWeapon) && shieldWeapon.HasMod("fd_gun_shield_redirect")) {
				playerInfo.ageisLevel = playerInfo.ageisLevel < 11 ? 11 : playerInfo.ageisLevel
			}

			entity mainWeapon = player.GetMainWeapons()[0]
			if (IsValid(mainWeapon) && mainWeapon.HasMod("fd_piercing_shots")) {
				playerInfo.ageisLevel = playerInfo.ageisLevel < 2 ? 2 : playerInfo.ageisLevel
			}
			if (IsValid(mainWeapon) && mainWeapon.HasMod("fd_gun_shield_redirect")) {
				playerInfo.ageisLevel = playerInfo.ageisLevel < 11 ? 11 : playerInfo.ageisLevel
			}
			
			if (IsValid(mainWeapon) && mainWeapon.HasMod("fd_LongRangePowerShot")) {
				playerInfo.ageisLevel = playerInfo.ageisLevel < 17 ? 17 : playerInfo.ageisLevel
			}
			if (IsValid(mainWeapon) && mainWeapon.HasMod("fd_CloseRangePowerShot")) {
				playerInfo.ageisLevel = playerInfo.ageisLevel < 8 ? 8 : playerInfo.ageisLevel
			}
			break;
		case "ion":
				
				break
	
			case "scorch":

				break
	
			case "northstar":
				
				break
	
			case "ronin":
				
				break
	
			case "tone":
				
				break

	
			case "vanguard":
				break
		default:
			break;
	}

	return playerInfo.ageisLevel
}

entity function GetPlayerTitanSoul(entity player)
{
	if (player.IsTitan()) {
		return player.GetTitanSoul()
	}
	if (IsValid(player.GetPetTitan())) {
		return player.GetPetTitan().GetTitanSoul()
	}

	return player.GetTitanSoul()
}

void function ShowRUIHUD( entity player1 )
{

	// entity cockpit = player.GetCockpit()
	if (file.cockpitRui != null) {
		return
	}


	
	// create ruis
	entity player = GetLocalViewPlayer()

	float[2] screenSize = GetScreenSize()

	var topoFullScreen = RuiTopology_CreatePlane( <0,0,0>, <screenSize[0],0,0>, <0,screenSize[1],0>, false )

	

	file.cockpitRui =  RuiCreate( $"ui/ajax_cockpit_base.rpak",topoFullScreen, RUI_DRAW_COCKPIT, 0 )
	// RuiTopology_UpdatePos( topoFullScreen, lowerScreenPosition, <0, -TITAN_COCKPIT_LOWER_RUI_SCREEN_SQUARE_SIZE, 0>, <0, 0, -(TITAN_COCKPIT_LOWER_RUI_SCREEN_SQUARE_SIZE * TITAN_COCKPIT_LOWER_RUI_SCREEN_HEIGHT_SCALE)> )

	RuiTrackFloat3( file.cockpitRui, "playerOrigin", player, RUI_TRACK_ABSORIGIN_FOLLOW )
	RuiTrackFloat3( file.cockpitRui, "playerEyeAngles", player, RUI_TRACK_EYEANGLES_FOLLOW )
	RuiTrackFloat( file.cockpitRui, "healthFrac", player, RUI_TRACK_HEALTH )
	RuiTrackFloat( file.cockpitRui, "shieldFrac", player, RUI_TRACK_SHIELD_FRACTION )
	RuiTrackFloat( file.cockpitRui, "dashFrac", player, RUI_TRACK_PLAYER_SUIT_POWER )
	RuiSetFloat( file.cockpitRui, "ejectManualTimeOut", EJECT_FADE_TIME )
	RuiSetFloat( file.cockpitRui, "ejectButtonTimeOut", TITAN_EJECT_MAX_PRESS_DELAY )
	RuiSetGameTime( file.cockpitRui, "ejectManualStartTime", -60.0 )
	RuiSetGameTime( file.cockpitRui, "ejectButtonPressTime", -60.0 )


	string playerSettings = GetLocalViewPlayer().GetPlayerSettings()
	float health = player.GetPlayerModHealth()
	float healthPerSegment = GetPlayerSettingsFieldForClassName_HealthPerSegment( playerSettings )
	RuiSetInt( file.cockpitRui, "numHealthSegments", int( health / healthPerSegment ) )
	RuiTrackFloat( file.cockpitRui, "cockpitColor", player, RUI_TRACK_STATUS_EFFECT_SEVERITY, eStatusEffect.cockpitColor )

	int numDashPips = int( floor( 100 / GetSettingsForPlayer_DodgeTable( GetLocalViewPlayer() )["dodgePowerDrain"] ) )
	RuiSetInt( file.cockpitRui, "numDashSegments", numDashPips )
	// RuiSetInt( file.cockpitLowerRui, "numDashSegments", numDashPips )

	RuiSetDrawGroup( file.cockpitRui, RUI_DRAW_COCKPIT )
	// #if MP
	// if ( GetCurrentPlaylistVarInt( "aegis_upgrades", 0 ) == 1 && !IsSpectating() && !IsWatchingKillReplay() )
	// 	thread DisplayFrontierRank( file.isFirstBoot )
	// #endif
	// file.isFirstBoot = false

	// UpdateTitanCockpitVisibility()
}

void function Hud_SetColorWithTable(var element, table color)
{
	if (!("a" in color)) {
		color.a <- 255
	}
	Hud_SetColor(element, color.r, color.g, color.b, color.a )
}

void function Hud_SetPosWithVector(var element, vector pos)
{
	Hud_SetPos( element, pos.x, pos.y )

}

void function LoadModSettings()
{
	if (file.entityStatus == null) {
		return
	}


	/////////// MAIN PANEL
	// Position
	vector panelPosition = StringToVector( GetConVarString("EntityStatus.panel_position") )
	Hud_SetPosWithVector(HudElement("EntityStatusTitle", file.entityStatus), panelPosition)
	
	// Title
	Hud_SetText(HudElement("EntityStatusTitle", file.entityStatus), GetConVarString("EntityStatus.title_content"))
	Hud_SetAlpha(HudElement("EntityStatusTitle", file.entityStatus), file.panelAlpha * 255)

	// Alpha
	file.panelAlpha = GetConVarFloat("EntityStatus.panel_alpha")
	Hud_SetPanelAlpha(file.entityStatus, file.panelAlpha * 255)
	Hud_SetAlpha(file.entityStatus, file.panelAlpha * 255)



	////////// BAR-GAP
	int barTall = GetConVarInt("EntityStatus.bar_tall")
	int barGap = GetConVarInt("EntityStatus.bar_gap")
	int barWidth = GetConVarInt("EntityStatus.bar_wide")
	for (int i = 1; i < maxSlot; i++) {
		var bar = HudElement("EntityStatusBar" + i, file.entityStatus)
		Hud_SetY(bar, barGap)
	}

	////////// PANEL BACKGROUND
	var entityStatusBg = HudElement("EntityStatusBg", file.entityStatus)
	entityStatusBg.Hide()

	int panelPaddingTop = GetConVarInt("EntityStatus.panel_padding_top")
	int panelPaddingRight = GetConVarInt("EntityStatus.panel_padding_right")
	int panelPaddingBottom = GetConVarInt("EntityStatus.panel_padding_bottom")
	int panelPaddingLeft = GetConVarInt("EntityStatus.panel_padding_left")

	int panelBgTall = barTall * file.targets.len() + panelPaddingTop + panelPaddingBottom + (file.targets.len() - 1) * abs(barGap)
	int panelBgWidth = barWidth + panelPaddingRight + panelPaddingLeft

	Hud_SetSize(entityStatusBg, panelBgWidth, panelBgTall)


	table panelColor = GetColorsFromConVar("EntityStatus.panel_bgcolor") 
	Hud_SetColorWithTable( entityStatusBg, panelColor )


	Hud_SetPos(entityStatusBg, 50 - panelPaddingRight, 400 - panelPaddingTop)
	// printt("entityStatusBg", "Hud_SetSize", Hud_GetSize(entityStatusBg)[0], Hud_GetSize(entityStatusBg)[1])

	// Rotation
	float panelRotation = GetConVarFloat("EntityStatus.panel_rotation")
	Hud_SetRotation( entityStatusBg, panelRotation)
	///////// BAR
	file.avatarAlpha = GetConVarFloat("EntityStatus.avatar_alpha")
	file.healthbarLabelAlpha = GetConVarFloat("EntityStatus.health_bar_label_alpha")
	file.moneyLabelAlpha = GetConVarFloat("EntityStatus.money_label_alpha")

	file.healthbarCommonFgColor = GetColorsFromConVar("EntityStatus.health_common_fgcolor") 
	file.healthbarLocalFgColor = GetColorsFromConVar("EntityStatus.health_local_fgcolor") 
	file.healthbarPartyFgColor = GetColorsFromConVar("EntityStatus.health_party_fgcolor") 
	file.healthbarDoomFgColor = GetColorsFromConVar("EntityStatus.health_doom_fgcolor") 
	file.healthbarShieldFgColor = GetColorsFromConVar("EntityStatus.health_shield_fgcolor") 
	file.healthbarAutotitanFgColor = GetColorsFromConVar("EntityStatus.health_autotitan_fgcolor") 

	file.coreLabelAlpha = GetConVarFloat("EntityStatus.core_label_alpha")
	file.coreLabelCoreBuildingFgColor = GetColorsFromConVar("EntityStatus.core_label_core_building_fgcolor") 
	file.coreLabelCoreReadyFgColor = GetColorsFromConVar("EntityStatus.core_label_core_ready_fgcolor") 
	file.coreLabelTitanBuildingFgColor = GetColorsFromConVar("EntityStatus.core_label_titan_building_fgcolor") 

	file.coreProgressAlpha = GetConVarFloat("EntityStatus.core_progress_alpha")
	file.coreProgressFgColor = GetColorsFromConVar("EntityStatus.core_progress_fgcolor") 

	file.coreBgAlpha  = GetConVarFloat("EntityStatus.core_bg_alpha")
	file.coreBgColor = GetColorsFromConVar("EntityStatus.core_bgcolor") 






}

void function SetBarFillColor(var barFill, entity player) {
	table color = file.healthbarCommonFgColor

	if (player.IsTitan() && GetDoomedState( player )) {
		color = file.healthbarDoomFgColor
	}

	Hud_SetColorWithTable( barFill, color )

}

table function GetColorsFromConVar(string conVar) {
	table color = StringToColors(GetConVarString(conVar))

	if (
		!("r" in color) ||
		!("g" in color) ||
		!("b" in color)
	)
	{
		SetConVarToDefault( conVar )
	}

	return StringToColors(GetConVarString(conVar))
}